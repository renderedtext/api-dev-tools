exit
c
path.split("/") == 5
path.split("/")
c
connection_route?
path
collection_route?
verb
c
orgs.routes.map(&:path)
orgs.routes.first.path
orgs.routes.first.name
orgs.routes
c
specs.resources.map(&:routes)c
specs.resources.map(&:routes)
specs.resource.map(&:routes)
c
@raml_specs.routes.count
@raml_specs
@raml_specs.
@raml_specs.routes.map(&:name)
exit
pp specs["resources"][8]["resources"][2]
require "pp"
pp specs["resources"][8]["resources"][2]
specs["resources"][8]["resources"][2]
specs["resources"][8]["resources"][2]["uniqueId"]
c
specs["resources"][8]["resources"][2]["uniqueId"]
specs["resources"][8]["resources"][2]["type"]
specs["resources"][8]["resources"][2]["absoluteUri"]
specs["resources"][8]["resources"][2]["relativeUri"]
specs["resources"][8]["resources"][2].keys
specs["resources"][8]["resources"][2]
specs["resources"][8]["resources"][2].map { |r| r["displayName"] }
specs["resources"][8]["resources"][2]["resources"].map { |r| r["displayName"] }
specs["resources"][8]["resources"].map { |r| r["displayName"] }
specs["resources"].map { |r| r["displayName"] }
c
specs["resources"].map { |r| r["displayName"] }
exit
specs["resources"].map { |r| r["displayName"] }
specs["resources"].first.keys
specs["resources"]
specs.keys
